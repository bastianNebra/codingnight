{
  "version": 3,
  "sources": ["../../src/textarea/style/TextareaStyle.js", "../../src/textarea/BaseTextarea.vue", "../../src/textarea/Textarea.vue", "../../src/textarea/Textarea.vue?vue&type=template&id=5443acc3&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-textarea {\n    font-family: inherit;\n    font-feature-settings: inherit;\n    font-size: 1rem;\n    color: ${dt('textarea.color')};\n    background: ${dt('textarea.background')};\n    padding: ${dt('textarea.padding.y')} ${dt('textarea.padding.x')};\n    border: 1px solid ${dt('textarea.border.color')};\n    transition: background ${dt('textarea.transition.duration')}, color ${dt('textarea.transition.duration')}, border-color ${dt('textarea.transition.duration')}, outline-color ${dt('textarea.transition.duration')}, box-shadow ${dt(\n    'textarea.transition.duration'\n)};\n    appearance: none;\n    border-radius: ${dt('textarea.border.radius')};\n    outline-color: transparent;\n    box-shadow: ${dt('textarea.shadow')};\n}\n\n.p-textarea:enabled:hover {\n    border-color: ${dt('textarea.hover.border.color')};\n}\n\n.p-textarea:enabled:focus {\n    border-color: ${dt('textarea.focus.border.color')};\n    box-shadow: ${dt('textarea.focus.ring.shadow')};\n    outline: ${dt('textarea.focus.ring.width')} ${dt('textarea.focus.ring.style')} ${dt('textarea.focus.ring.color')};\n    outline-offset: ${dt('textarea.focus.ring.offset')};\n}\n\n.p-textarea.p-invalid {\n    border-color: ${dt('textarea.invalid.border.color')};\n}\n\n.p-textarea.p-variant-filled {\n    background: ${dt('textarea.filled.background')};\n}\n\n.p-textarea.p-variant-filled:enabled:focus {\n    background: ${dt('textarea.filled.focus.background')};\n}\n\n.p-textarea:disabled {\n    opacity: 1;\n    background: ${dt('textarea.disabled.background')};\n    color: ${dt('textarea.disabled.color')};\n}\n\n.p-textarea::placeholder {\n    color: ${dt('textarea.placeholder.color')};\n}\n\n.p-textarea-fluid {\n    width: 100%;\n}\n\n.p-textarea-resizable {\n    overflow: hidden;\n    resize: none;\n}\n`;\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-textarea p-component',\n        {\n            'p-filled': instance.filled,\n            'p-textarea-resizable ': props.autoResize,\n            'p-invalid': props.invalid,\n            'p-variant-filled': props.variant ? props.variant === 'filled' : instance.$primevue.config.inputStyle === 'filled' || instance.$primevue.config.inputVariant === 'filled',\n            'p-textarea-fluid': instance.hasFluid\n        }\n    ]\n};\n\nexport default BaseStyle.extend({\n    name: 'textarea',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TextareaStyle from 'primevue/textarea/style';\n\nexport default {\n    name: 'BaseTextarea',\n    extends: BaseComponent,\n    props: {\n        modelValue: null,\n        autoResize: Boolean,\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        fluid: {\n            type: Boolean,\n            default: null\n        }\n    },\n    style: TextareaStyle,\n    provide() {\n        return {\n            $pcTextarea: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <textarea :class=\"cx('root')\" :value=\"modelValue\" :aria-invalid=\"invalid || undefined\" @input=\"onInput\" v-bind=\"ptmi('root', ptmParams)\"></textarea>\n</template>\n\n<script>\nimport { isEmpty } from '@primeuix/utils/object';\nimport BaseTextarea from './BaseTextarea.vue';\n\nexport default {\n    name: 'Textarea',\n    extends: BaseTextarea,\n    inheritAttrs: false,\n    emits: ['update:modelValue'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    mounted() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    updated() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    methods: {\n        resize() {\n            this.$el.style.height = 'auto';\n            this.$el.style.height = this.$el.scrollHeight + 'px';\n\n            if (parseFloat(this.$el.style.height) >= parseFloat(this.$el.style.maxHeight)) {\n                this.$el.style.overflowY = 'scroll';\n                this.$el.style.height = this.$el.style.maxHeight;\n            } else {\n                this.$el.style.overflow = 'hidden';\n            }\n        },\n        onInput(event) {\n            if (this.autoResize) {\n                this.resize();\n            }\n\n            this.$emit('update:modelValue', event.target.value);\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        ptmParams() {\n            return {\n                context: {\n                    disabled: this.$attrs.disabled || this.$attrs.disabled === ''\n                }\n            };\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        }\n    }\n};\n</script>\n", "<template>\n    <textarea :class=\"cx('root')\" :value=\"modelValue\" :aria-invalid=\"invalid || undefined\" @input=\"onInput\" v-bind=\"ptmi('root', ptmParams)\"></textarea>\n</template>\n\n<script>\nimport { isEmpty } from '@primeuix/utils/object';\nimport BaseTextarea from './BaseTextarea.vue';\n\nexport default {\n    name: 'Textarea',\n    extends: BaseTextarea,\n    inheritAttrs: false,\n    emits: ['update:modelValue'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    mounted() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    updated() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    methods: {\n        resize() {\n            this.$el.style.height = 'auto';\n            this.$el.style.height = this.$el.scrollHeight + 'px';\n\n            if (parseFloat(this.$el.style.height) >= parseFloat(this.$el.style.maxHeight)) {\n                this.$el.style.overflowY = 'scroll';\n                this.$el.style.height = this.$el.style.maxHeight;\n            } else {\n                this.$el.style.overflow = 'hidden';\n            }\n        },\n        onInput(event) {\n            if (this.autoResize) {\n                this.resize();\n            }\n\n            this.$emit('update:modelValue', event.target.value);\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        ptmParams() {\n            return {\n                context: {\n                    disabled: this.$attrs.disabled || this.$attrs.disabled === ''\n                }\n            };\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        }\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "instance", "props", "filled", "autoResize", "invalid", "variant", "$primevue", "config", "inputStyle", "inputVariant", "hasFluid", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "modelValue", "autoResize", "Boolean", "invalid", "type", "variant", "String", "fluid", "style", "TextareaStyle", "provide", "$pcTextarea", "$parentInstance", "script", "BaseTextarea", "inheritAttrs", "emits", "inject", "$pcFluid", "mounted", "$el", "offsetParent", "resize", "updated", "methods", "height", "scrollHeight", "parseFloat", "maxHeight", "overflowY", "overflow", "onInput", "event", "$emit", "target", "value", "computed", "filled", "toString", "length", "ptmParams", "context", "disabled", "$attrs", "hasFluid", "isEmpty", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "undefined", "$options", "apply", "arguments", "ptmi", "_hoisted_1"]
}
